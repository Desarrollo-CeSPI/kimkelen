Digamos que tenemos un schema igual al siguiente:

  Income:
    tableName: income
    description: tabla de ingresos
    columns:
      id:
      [...]

  IncomePaymentMethod:
    tableName: income_payment_method
    description: formas de pago utilizadas para un ingreso determinado
    columns:
      id:
      income_id:
        type: integer
        foreignTable: income
        foreignReference: id
        required: true
      [...]
      _uniques:
        index: [income_id, payment_method_id]

Entonces entre Income y IncomePaymentMethod hay una relación 0 a N, en donde un
Income puede tener 0 o N IncomePaymentMethods.

Para usar el plugin para editar las formas de pago en el IncomeForm se debe editar dicha clase:

<?php

class IncomeForm extends BaseIncomeForm
{
  public function configureWidgets()
  {
    $this->setWidget('income_payment_methods', new mtWidgetFormEmbed(array(
      'form_creation_method'        => array('IncomeForm', 'doIncomePaymentMethodFromRequestForm'),
      'edit_form_creation_method'   => array('IncomeForm', 'doIncomePaymentMethodForm'),
      'objects'                     => $this->getObject()->getIncomePaymentMethods(), #Formas de pago asociadas en la DB
      'parent_form'                 => $this,
      'child_form_name'             => 'embedded',
      'child_form_title_method'     => 'getFormTitle',

      'title'                       => 'Formas de pago',
      'toolbar-add-text'            => 'Agregar',
      'toolbar-reset-text'          => 'Restaurar',
      'toolbar-clean-text'          => 'Borrar todos',
      'delete-button-text'          => 'borrar',
    )));

    /**
     * Aquí se embeben los formularios. Debe ser llamado SIEMPRE.
     **/
    $this->getWidget('income_payment_methods')->embedForms('income_payment_methods');
  }

  public function configureValidators()
  {
    $this->setValidator('income_payment_methods', new sfValidatorPass());
  }
}

?>

Como vemos al configurar el widget se han mencionado 3 métodos. Aquí van:

<?php

class IncomeForm extends BaseIncomeForm
{
  [...]

  static public function doIncomePaymentMethodFromRequestForm($taintedValues = array(), $params = array())
  {
    if (is_array($taintedValues) && isset($taintedValues['id']))
    {
      $object = IncomePaymentMethodPeer::retrieveByPk($taintedValues['id']);
    }
    else
    {
      $object = new IncomePaymentMethod();
    }

    return new IncomePaymentMethodForm($object);
  }

  static public function doIncomePaymentMethodForm($object)
  {
    return new IncomePaymentMethodForm($object);
  }

  /**
   * En esté metodo se asigna a cada IncomePaymentMethod el Income ya guardado (en caso de nuevos)
   * y se borran los IncomePaymentMethods que han dejado de estar asociados a este objeto.
   */
  public function saveEmbeddedForms($con = null, $forms = null)
  {
    $con = null === $con? $this->getConnection() : $con;

    /**
     * Obtengo los objetos IncomePaymentMethod ya guardados
     * en la DB que todavía se encuentran asociados al Income.
     *
     * Aquellos que son nuevos, se les asigna el Income.
     *
     */
    $toUpdate = array();
    foreach ($this->getWidget('income_payment_methods')->getEmbeddedForms() as $form)
    {
      $form->getObject()->setIncome($this->getObject());
      if (!$form->isNew())
      {
        $toUpdate[] = $form->getObject()->getId();
      }
    }

    /**
     * Borro aquellos que han dejado de estar asociados
     */
    if (!$this->isNew())
    {
      $c = new Criteria();
      $c->add(IncomePaymentMethodPeer::ID, $toUpdate, Criteria::NOT_IN);
      $c->add(IncomePaymentMethodPeer::INCOME_ID, $this->getObject()->getPrimaryKey());
      IncomePaymentMethodPeer::doDelete($c, $con);
    }

    parent::saveEmbeddedForms($con, $forms);
  }

  [...]
}

Aquí se implementa el método que nos devuelve el título del formulario embebido.
Se puede hacer lo que quiera, yo aquí abarque todos los casos que puedan pasar.

También se debe unsetear el widget 'income_id' ya  que es asignado
en el 'IncomeForm::saveEmbeddedForms'.

class IncomePaymentMethodForm extends BaseIncomePaymentMethodForm
{
  public function configure()
  {
    [...]
    unset($this['income_id']);
    [...]
  }

  [...]
  public function getFormTitle($taintedValues = array())
  {
    if ($this->isNew())
    {
      return 'Nueva forma de pago';
    }

    if (is_array($taintedValues) && isset($taintedValues['payment_method_id']) && !empty($taintedValues['payment_method_id']))
    {
      $object = PaymentMethodPeer::retrieveByPk($taintedValues['payment_method_id']);
      $object = is_null($object)? $this->getObject()->getPaymentMethod() : $object;
    }
    else
    {
      $object = $this->getObject()->getPaymentMethod();
    }

    return 'Formulario de forma de pago "'.strval($object).'"';
  }
  [...]
}
