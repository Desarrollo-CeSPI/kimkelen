![alt portada](/manual-tapa.jpg "Portada")

# Conocimientos previos

Para entender correctamente los conceptos y plataforma del sistema **Kimkëlen** se recomienda tener conocimientos previos en:

* Programación en PHP
* *Framework* Symfony >= 1.2 && < 2.0. Documentación oficial disponible [aquí](http://symfony.com/legacy/doc/jobeet/1_4/es/01?orm=Propel)
* Programación orientada a objetos (objetos, clases, herencia, patrones de diseño)

* * *

# Estructura del proyecto

Resulta importante destacar la estructura de directorios que presenta el proyecto. A continuación se listan y especifican los directorios más representativos:

    apps/
      backend/
      config/
      i18n/
      lib/
      modules/
      templates/
    cache/
    config/
    data/
    doc/
    flavors/ → Aquí se encuentran los sabores con la lógica de negocio particular de cada uno 
      flavor1/
      . . .
      flavorN/
    lib/
      behavior/ → Aquí se encuentran comportamientos específicos de clases que serán llamados como *hooks* 
      . . .
      filter/
      form/
      model/
      reference/
      school_behaviour/ → Aquí se encuentran las clases *base* de las cuales heredarán los sabores
        base/
        default/
      symfony/
      task/
      util/
      . . .
    plugins/
    web/

El proyecto hace uso de varios patrones de arquitectura y diseño de software.

Gracias a estar desarrollado sobre el *framework* Symfony 1.2, el código persigue la estructura que dicta el patrón MVC (*Model View Controller*). Para ello, MVC propone la construcción de tres componentes distintos:

* modelo
* vista
* controlador

Es decir, por un lado define componentes para la representación de la información, y por otro lado para la interacción del usuario. En la estructura de directorios señalada con antelación, el modelo está representado dentro de la carpeta `lib/` raíz. Allí encontraremos las clases que representan objetos. 

La vista está comprendida por todos los archivos en los directorios `/templates` de la aplicación. 

Por último, el controlador está definido dentro de los archivos actions.class.php de cada módulo (dentro de `apps/modules/modulo/actions/`).

* * *

# *Flavors* o sabores

Algunas cuestiones propias de cada colegio no serán configurables desde el sistema, y puede ser necesario personalizar el mismo a través de un flavor o sabor. Es decir, plasmar cómo debe comportarse la escuela en el código. Aquí es donde el sistema hace uso de patrones de diseño conocidos como [template method](http://www.oodesign.com/template-method-pattern.html) y [factory method](http://www.oodesign.com/factory-method-pattern.html).

Como ya fue visto, en la estructura de directorios del proyecto hay un directorio llamado flavors/. Allí dentro se puede crear uno propio para una escuela en particular. Una vez que el mismo esté implementado, se podrá entonces comenzar a emularlo a través del comando:
 
`php symfony kimkelen:flavor [nombre_del_flavor]`

Tomaremos como ejemplo el caso de un *flavor* que llamaremos **ejemplo**. Dentro del directorio `ejemplo/` estárán comprendidos los subdirectorios y clases:

    config/
    i18n/
    lib/
      behavior/
        factory/
          EjemploFormFactory.class.php
          EjemploSchoolBehaviourFactory.class.php
        EjemploEvaluatorBehaviour.class.php
        EjemploSchoolBehaviour.class.php
    modules/
    templates/
    web/

Dentro de un *flavor* es posible definir el comportamiento de la escuela (en `EjemploSchoolBehaviour.class.php`) y la forma de evaluación de la escuela (en `EjemploEvaluatorBehaviour.class.php`). Tanto las clases `EjemploSchoolBehaviour.class.php` como `EjemploEvaluatorBehaviour.class.php` están vacías, por ende el *flavor* ejemplo tomará todo el comportamiento por defecto que está definido en `lib/school_behaviour/base`. Allí están definidas justamente las clases *base* de quien heredará cada *flavor*.

Hay *flavors* definidos para varias escuelas que  sobreescriben muchos de los métodos *base*. Se los puede observar dentro del directorio *flavors* y tomarlos a modo de ejemplo.

En el directorio `lib/school_behaviour/base/interface` hay tres interfaces que definen los encabezados de los métodos que pueden ser sobreescritos por un *flavor*. Por supuesto, si se desea sobreescribir algún método que no se encuentra presente en `lib/school_behaviour/base/interface` puede sobreescribirse igual (y debería agregarse entonces en `lib/school_behaviour/base/interface` por prolijidad).

* * *

# Creando un *flavor*

Para crear un *flavor* se deberá crear la misma estructura de directorios descrita anteriormente. Para esto existe una *task* symfony que se corre desde consola a través de:

`php symfony kimkelen:create-flavor ejemplo`

Este comando creará dentro de la carpeta `flavors/` un directorio con el nombre que se le dio al *flavor* nuevo (en este caso, ejemplo) y todos sus correspondientes subdirectorios y clases esenciales.


## Subdirectorio config/

Luego, dentro del directorio config/ del nuevo *flavor* se define el archivo `view.yml`, en donde se especificará con un formato preestablecido qué archivos `.css` y `.js` deben ser incluídos en la aplicación, campos HTML meta, cultura, etc. 
Otro archivo que puede definirse allí debe llamarse `pm_pdf_kit.yml`. De encontrarse dicho archivo en el *flavor* que se está "emulando", el *plugin* de la aplicación que se encarga de la generación de archivos PDF tomará las configuraciones que dicho archivo establece. Por ejemplo:

    all:
      options:
        orientation: Landscape
        page-size: A4
        margin-top: 0.5
        margin-bottom: 0

define formatear los márgenes de página y establecer que se utilice orientación apaisada.

## Subdirectorio `i18n/`

Dentro del directorio `i18n/` debemos definir un archivo que se encargará de realizar las internacionalizaciones del lenguaje, haciendo las veces de traductor. El idioma por defecto y cultura a ser considerada está definida como español de Argentina (es_AR). Se debe crear dentro de `i18n/` un archivo llamado `messages.[cultura_elegida].xml`. Para este caso, el español, se definirá `messages.es.xml`. 
Es necesario respetar cómo estará formado este archivo, dado que si queda malformado el XML las traducciones no serán tomadas en cuenta. Para cada traducción que quiera hacerse, se debe seguir la forma:

    <trans-unit>
      <source>I want to translate this sentence.</source>
      <target>Quiero traducir esta oración.</target>
    </trans-unit>


Para más información sobre internacionalización, consultar la [documentación oficial](http://symfony.com/legacy/doc/jobeet/1_4/es/19?orm=Propel).


## Subdirectorio `lib/`

Dentro del directorio lib/ encontramos el corazón del *flavor*. Luego de haber creado un nuevo flavor nos encontraremos con la estructura de directorios descrita en el apartado anterior. 
Nótese que las clases `EjemploSchoolBehaviour.class.php` y `EjemploEvaluatorBehaviour.class.php` heredarán de `BaseSchoolBehaviour` y `BaseEvaluatorBehaviour` respectivamente (concepto de [herencia de clases](http://php.net/manual/es/language.oop5.inheritance.php)). Se verán de la siguiente forma:

```php

class EjemploSchoolBehaviour extends BaseSchoolBehaviour
{
}

```

y 

```php
class EjemploEvaluatorBehaviour extends BaseEvaluatorBehaviour
{
}
```

Luego, podría interesarnos por ejemplo redefinir el método que chequea las condiciones de repetición de un alumno, y que retorna *true* si debe repetir o *false* en caso contrario. Para lograr esto, crearemos dentro de la clase `EjemploEvaluatorBehaviour.class.php` el método:

```php

class EjemploEvaluatorBehaviour extends BaseEvaluatorBehaviour
{

  public function checkRepetitionCondition($student, $student_career_school_year)
  {
  //Si el estudiante está en el último año de la carrera, retorna falso.
  if ($student_career_school_year->isLastYear()) {
    return false;
  }

  $career_school_year = $student_career_school_year->getCareerSchoolYear();

  //Si el alumno adeuda más previas de las permitidas por la institución, debe repetir.
  $prev =    StudentRepprovedCourseSubjectPeer::countRepprovedForStudentAndCareer($student, 
  $student_career_school_year->getCareerSchoolYear()->getCareer());

  return ($prev > $career_school_year->getSubjectConfiguration()->getMaxPrevious());
  }
}
```

Nota: La cantidad de materias previas/asignaturas pendientes `$prev` utilizado en este ejemplo es modificable desde la interfaz del sistema.

Ahora supongamos que una de las reglas de la institución dice que un alumno que está en el primer año de una carrera no puede repetir el año. En este caso, tendríamos que modificar el método recién implementado agregando una condición:

```php

public function checkRepetitionCondition($student, $student_career_school_year)
{
//Si el estudiante está en el último o primer año de la carrera, retorna falso
if ($student_career_school_year->isLastYear() || $student_career_school_year->isFirstYear())
{
  return false;
}
...
}
```

y como está claro, deberíamos implementar la función `isFirstYear()` dentro de la clase `lib/model/StudentCareerSchoolYear.php`. Esta función podría definir algo como lo siguiente:

```php
public function isFirstYear()
{
  return $this->getYear() == $this->getCareerSchoolYear()->getCareer()->getMinYear();
}
```

y si seguimos esto con más profundidad, el método getMinYear() en lib/model/Career.php está definido como:

```php

/**
* Returns the number that represents the first year for this career
* @return int
*/

public function getMinYear()
{
  return SchoolBehaviourFactory::getInstance()->getMinimumCareerYear();
}
```

La sentencia establecida en el *return* significa que el flujo irá a la clase SchoolBehaviour correspondiente al *flavor* emulado actualmente y que busque allí un método llamado `getMinimumCareerYear()`. De no encontrar dicho método, en este caso, en nuestra clase `EjemploSchoolBehaviour.class.php`, la buscará en la clase `BaseSchoolBehaviour.class.php`. Si queremos redefinir este método en nuestra clase `EjemploSchoolBehaviour.class.php` podemos hacerlo por supuesto, de la misma forma que redefinimos el método anterior.

## Subdirectorio `modules/`

Si queremos personalizar algún *template* en particular, por ejemplo, los que componen a los boletines, deberemos hacer lo siguiente:

* Crear la siguiente estructura de directorios:

    ejemplo/
      modules/
        report_card/
          templates/

Dentro de la carpeta `templates/` podemos redefinir (crear) el partial `_header.php`. Dicho partial es quien se encarga de renderizar el encabezado (logo) de la institución en los boletines, además de los encabezados principales.

Nota: Será necesario limpiar la caché del proyecto para que los cambios tomen efecto y las nuevas clases y archivos sean reconocidas, y por supuesto también recordar "emular" el *flavor* que se quiere utilizar corriendo el *task* correspondiente, así:

`php symfony cc`

`php symfony kimkelen:flavor ejemplo`

## Subdirectorio `templates/`

En el directorio templates/ se habrá creado `layout.php` que definirá el *layout* principal de aplicación (esto es, barra de login, menú y pie de página). Customizarla a gusto y necesidad.

## Subdirectorio `web/`

En `web/` se definen las hojas de estilo e imágenes que se quieran utilizar.

    web/
      css/
      images/

Los archivos `.js` no se definen aquí, si no que se toman del directorio `web/` global al proyecto.

* * *

# Trabajando con Git, SVN u otro sistema de versionado

Si se desea que varios *host* tengan instalado y corriendo el sistema local para poder desarrollar a la par, es importante que los archivos `databases.yml` y `propel.ini` no sean versionados y que sean ignorados por la herramienta de versionado que se esté utilizando y, en cambio, sí versionar los archivos propios que tendrá cada *host* que esté corriendo el sistema localmente. De esta forma, cada uno tendrá sus propios archivos de configuración, por ejemplo:

    config/databases-yml-host1
    config/databases.yml-host2
    config/propel.ini-host1
    config/propel.ini-host2

En donde cada desarrollador puede configurar la BBDD y el acceso a la misma en particular. Luego, crear un link simbólico:

`ln -s config/databases-yml-host1 config/databases.yml`

en cada *host*. Así se logra que varios *host* puedan desarrollar para el sistema en paralelo sin entorpecer la/las configuración/es de los demás.
